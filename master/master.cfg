# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

def mergeRequests(builder, req1, req2):
    "any requests with the same branch can be merged"
    return req1.source.branch == req2.source.branch

c['mergeRequests'] = mergeRequests

####### Log horizons

c['changeHorizon'] = 5000	# Must be larger than number of builders
c['buildHorizon'] = 100
c['eventHorizon'] = 50
c['logHorizon'] = 50
c['changeCacheSize'] = 1000
c['buildCacheSize'] = 5

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("server", "MySlav3Pa55W0rd", max_builds=3),
	BuildSlave("saturn", "MySlav3Pa55W0rd", max_builds=3),
	BuildSlave("desktop", "MySlav3Pa55W0rd", max_builds=3),
	BuildSlave("jupiter", "MySlav3Pa55W0rd", max_builds=3),
	BuildSlave("mars", "MySlav3Pa55W0rd", max_builds=3)]

#	BuildSlave("hyperion", "MySlav3Pa55W0rd", max_builds=1),
#	BuildSlave("titan", "MySlav3Pa55W0rd", max_builds=1),
#	BuildSlave("minecraft", "MySlav3Pa55W0rd", max_builds=1)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.basic import AnyBranchScheduler
from schedulers import TimedSingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import FixedParameter
from buildbot.changes import filter
c['schedulers'] = []

####### Global LOCKS

from buildbot import locks

build_lock = locks.SlaveLock("slave_builds", maxCount = 2,
		maxCountForSlave = {
			'server' : 2,
			'saturn' : 2,
			'desktop' : 2,
			'jupiter' : 2,
			'mars' : 2
		})

smatch_lock = locks.SlaveLock("smatch", maxCount = 1)
stable_update_lock = locks.SlaveLock("stable", maxCount = 1)

master_lock = locks.MasterLock("counter", maxCount = 1)

####### BUILD CONFIGURATION

# repositories

hwmon_repo = 'git://server.roeck-us.net/git/linux.git'
mainline_repo = 'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git'
stable_repo = 'git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git'
stable_local_repo = 'git://server.roeck-us.net/git/linux-stable.git'
next_repo = 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git'

branches = ['4.19',
	'5.4', '5.10', '5.15',
	'6.1', '6.6', '6.7', '6.8']

linux_branches = map(lambda x: 'linux-%s.y' % x, branches)

# hwmon, watchdog, smatch

hwmon_branches_only = [ 'hwmon', 'hwmon-next' ]
# hwmon_branches_only = [ 'hwmon', 'hwmon-next', 'hwmon-staging' ]
# watchdog_branches_only = [ 'watchdog-next', 'dsa' ]
# watchdog_branches_only = [ 'watchdog-next' ]
watchdog_branches_only = [ 'watchdog-next', 'testing' ]
master_branch = [ 'master' ]
hwmon_branches = hwmon_branches_only + watchdog_branches_only + master_branch
smatch_branches = hwmon_branches_only
hwmon_slaves = [ 'server', 'desktop', 'saturn', 'jupiter', 'mars' ]
# hwmon_slaves = [ 'server', 'desktop', 'saturn', 'jupiter', 'mars', 'minecraft' ]

# stable

stable_branches = branches + [ 'pending-fixes', 'next' ]
stable_upstream_branches = [ 'master' ] + linux_branches

next_branches = [ 'master', 'pending-fixes' ]

stable_slaves = [ 'server', 'desktop', 'saturn', 'jupiter', 'mars' ]
# qemu_slaves = [ 'server', 'desktop', 'hyperion', 'titan', 'saturn', 'jupiter', 'mars' ]
qemu_slaves = [ 'server', 'desktop', 'saturn', 'jupiter', 'mars' ]

stable_arches = [ 'alpha', 'arc', 'arcv2', 'arm', 'arm64',
		'csky',
		'h8300', 'hexagon', 'i386',
		'loongarch',
		'm68k', 'm68k_nommu',
		'microblaze', 'mips',
		'nds32', 'nios2',
		'openrisc', 'parisc', 'parisc64', 'powerpc',
		'riscv32', 'riscv64',
		's390', 'sh', 'sparc32', 'sparc64',
		'x86_64', 'xtensa',
		'um' ]

skip_next = [ 'next' ]
skip_master = [ 'master',
		'pending-fixes', 'hwmon', 'hwmon-next', 'watchdog-next',
		'testing' ] + skip_next

skip_68 = [ '6.8' ] + skip_master
skip_67 = [ '6.7' ] + skip_68
skip_66 = [ '6.6' ] + skip_67
skip_61 = [ '6.1' ] + skip_66
skip_515 = [ '5.15' ] + skip_61
skip_510 = [ '5.10' ] + skip_515
skip_419 = [ '4.19', '5.4', ] + skip_510

skip_to_419 = [ '4.19' ]
skip_to_54 = skip_to_419 + [ '5.4' ]
skip_to_510 = skip_to_54 + [ '5.10' ]
skip_to_515 = skip_to_510 + [ '5.15' ]

import collections

skip = collections.defaultdict(list, {
	'alpha':	skip_to_419,
	'csky':		skip_to_419,
	'h8300':	skip_61,
	'hexagon':	skip_to_510,
	'loongarch':	skip_to_515,
	'nds32':	skip_61,
	'riscv32':	skip_to_54,
})

qemu_targets_419 = [ 'arm', 'arm-aspeed', 'arm-v7', 'arm64', 'arm64be',
		'm68k', 'microblaze', 'microblazeel', 'mips', 'mipsel', 'mips64', 'mipsel64',
		'nios2',
		'openrisc',
		'parisc', 'ppc', 'ppc64',
		's390', 'sparc', 'sparc64',
		'x86', 'x86_64', 'xtensa' ]
qemu_targets_54 = qemu_targets_419 + [ 'alpha', 'riscv64' ]
qemu_targets_510 = qemu_targets_54 + [ 'riscv32', 'sh', 'sheb' ]
qemu_targets_515 = qemu_targets_510 + [ 'parisc64' ]
qemu_targets_61 = qemu_targets_515 + [ 'loongarch' ]
qemu_targets_66 = qemu_targets_61
qemu_targets_67 = qemu_targets_66
qemu_targets_68 = qemu_targets_67
qemu_targets_master = qemu_targets_68
qemu_targets_next = qemu_targets_master

qemu_targets_all = qemu_targets_master

# Local locks

target_lock = { }
for t in qemu_targets_all:
    target_lock[t] = locks.SlaveLock("qemu_target_%s" % t, maxCount = 1)

####### BUILDERS

def getBuilderPriority(builder):
    try:
        return builder.config.properties.get("priority", 0)
    except Exception as e:
	return 5

def prioritizeBuilders(buildmaster, builders):
    builders.sort(key=getBuilderPriority)
    return builders

c['prioritizeBuilders'] = prioritizeBuilders

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.config import BuilderConfig
from buildbot.status.builder import SUCCESS,WARNINGS,FAILURE,EXCEPTION,RETRY,SKIPPED

from buildbot.steps.shell import ShellCommand
from buildbot.steps.master import MasterShellCommand
from shellcommands import QemuBuildCommand
from shellcommands import StableBuildCommand

c['builders'] = []
# force = []
force_updates = []

def isSuccess(result, s):
     return (result == SUCCESS)

# hwmon builds (source verification)

c['change_source'].append(GitPoller(
        hwmon_repo, project='hwmon', workdir='hwmon-workdir',
	branches=hwmon_branches, pollinterval=600, usetimestamps=False))

for branch in smatch_branches:
    c['schedulers'].append(TimedSingleBranchScheduler(
		name=branch,
		timeRange=["22:00:00","02:00:00"],
		change_filter=filter.ChangeFilter(project='hwmon', branch=branch),
		collapseRequests = True,
		builderNames=[ branch ]))
    # force.append(branch)
    f = BuildFactory()
    f.addStep(Git(repourl=hwmon_repo, branch=branch, alwaysUseLatest=True,
		clobberOnFailure=True,
		hideStepIf=isSuccess))
    f.addStep(ShellCommand(timeout=3600,
		description='building',
		descriptionDone='complete',
		command=["hwmon-build.sh"],
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))
    # One directory per slave. Access must be exclusive per slave.
    c['builders'].append(
	BuilderConfig(name=branch,
		slavenames=hwmon_slaves,
		factory=f,
		properties={"priority": 2},
		locks=[build_lock.access('counting'),
		       smatch_lock.access('exclusive')]))

# stable, and next builds

# Poll stable releases hourly.
c['change_source'].append(GitPoller(
        stable_local_repo, project='stable', workdir='stable-workdir',
	branches=linux_branches, pollinterval=3600, usetimestamps=False))

# Poll next and pending_fixes every other day.
c['change_source'].append(GitPoller(
        next_repo, project='next', workdir='next-workdir',
	branches=next_branches, pollinterval=2*24*3600, usetimestamps=False))

for b in stable_branches + hwmon_branches:
    builders = []
    force_branch = []
    force_qemu_branch = []
    if b in hwmon_branches:
        branch = b
	repo = hwmon_repo
	# proj = "hwmon-builds"
	proj = "hwmon"
    elif b == 'next':
        branch = 'master'
	repo = next_repo
	proj = "next"
    elif b == 'pending-fixes':
	branch = 'pending-fixes'
	repo = next_repo
	proj = "next"
    else:
	branch = "linux-%s.y" % b
	repo = stable_local_repo
	proj = "stable"
    sname = "%s-%s" % (proj, b)
    for arch in stable_arches:
	if b in skip[arch]:
	    continue
        name = "%s-%s-%s" % (proj, arch, b)
        builddir = "%s-%s" % (proj, b)
        builders.append(name)
        # force.append(name)
        force_branch.append(name)
        f = BuildFactory()
        f.addStep(Git(repourl=repo, branch=branch, mode='full',
		clobberOnFailure=True,
		hideStepIf=isSuccess))
        f.addStep(StableBuildCommand(timeout=3600,
		description='building',
		descriptionDone='complete',
		command=["stable-build-arch.sh", arch, branch],
		env={'PATH': "/opt/buildbot/bin:${PATH}"},
		warnOnWarnings=True))
	# Image builds are exclusive: One per slave
        c['builders'].append(
		BuilderConfig(name=name, slavenames=stable_slaves, factory=f,
			slavebuilddir=builddir,
			properties={"priority": 3},
			locks=[build_lock.access('exclusive')]))
    if b in hwmon_branches + next_branches:
	qemu_targets = qemu_targets_master
    else:
	qemu_targets = eval("qemu_targets_%s" % b.replace('.', ''))
    for t in qemu_targets:
	if b in skip[t]:
	    continue
	f = BuildFactory()
	cmd = "run-qemu-%s.sh" % t
	path = "/opt/buildbot/rootfs/%s:${PATH}" % t
	tname = "qemu-%s-%s" % (t, b)
	tbuilddir = "qemu-%s" % t
	builders.append(tname)
	# force.append(tname)
	# force_branch.append(tname)
	force_qemu_branch.append(tname)
	f.addStep(Git(repourl=repo, branch=branch, mode='full',
		clobberOnFailure=True,
		haltOnFailure=True, hideStepIf=isSuccess))
	f.addStep(QemuBuildCommand(timeout=1800,
		description='running',
		descriptionDone='complete',
		command=[ cmd ], env={'PATH': path},
                haltOnFailure=True, flunkOnFailure=True,
                warnOnWarnings=True))
	# One qemu test per target. Multiple builds in parallel per slave.
	c['builders'].append(
		BuilderConfig(name=tname, slavenames=qemu_slaves, factory=f,
			slavebuilddir=tbuilddir,
			properties={"priority": 4},
			locks=[build_lock.access('counting'),
			       target_lock[t].access('exclusive')]))
    c['schedulers'].append(TimedSingleBranchScheduler(
		name=sname,
		change_filter=filter.ChangeFilter(project=proj,
						  branch=branch),
		timeRange=["22:00:00","02:00:00"],
		collapseRequests = True,
		builderNames=builders))
    c['schedulers'].append(ForceScheduler(name="Branch %s" % b,
		reason=FixedParameter(name="reason", default=""),
		properties=[ ],
		builderNames=force_branch))
    c['schedulers'].append(ForceScheduler(name="Branch %s (qemu)" % b,
		reason=FixedParameter(name="reason", default=""),
		properties=[ ],
		builderNames=force_qemu_branch))

#
# stable repository updater has its dedicated poller, scheduler,
# build factory, and builder. Poll once per hour to catch new stable
# releases.
#
c['change_source'].append(GitPoller(stable_repo,
	project='stable-updates',
        workdir='stable-updates-workdir',
	branches=stable_upstream_branches,
        pollinterval=3600, usetimestamps=False))

c['schedulers'].append(SingleBranchScheduler(
                            name="stable-updater",
                            change_filter=filter.ChangeFilter(project='stable-updates'),
			    treeStableTimer=30*60,
                            builderNames=["stable-updates"]))

f_stable_update = BuildFactory()
# check out the source
f_stable_update.addStep(Git(repourl=stable_repo,
		clobberOnFailure=True,
		mode='full', alwaysUseLatest=True, hideStepIf=isSuccess))
# update stable tree
f_stable_update.addStep(ShellCommand(command=["git-push-local.sh"],
		description='updating stable',
		descriptionDone='stable update done',
		haltOnFailure=True,
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="stable-updates",
	slavenames=[ "server" ],
	properties={"priority": 0},
	factory=f_stable_update))

force_updates.append("stable-updates")

#
# master repository updater has its dedicated poller, scheduler,
# build factory, and builder.

def master_branch_fn(branch):
    return branch in master_branch

# Build mainline every other day.
c['change_source'].append(GitPoller(mainline_repo,
	project='master-updates',
	workdir='master-updates-workdir',
	branches=master_branch,
	category='mainline',
	pollinterval=2*24*3600,
	pollAtLaunch=True,
	usetimestamps=False))

c['schedulers'].append(SingleBranchScheduler(
                            name="master-updates",
                            change_filter=filter.ChangeFilter(project='master-updates',
							      category='mainline'),
			    treeStableTimer=5*60,
                            builderNames=["master-updates"]))

f_master_update = BuildFactory()
# check out the source
f_master_update.addStep(Git(repourl=mainline_repo,
		clobberOnFailure=True,
		branch='master', alwaysUseLatest=True, hideStepIf=isSuccess))
# update master tree
f_master_update.addStep(ShellCommand(command=["git-push-master.sh"],
		description='updating master',
		descriptionDone='master update done',
		haltOnFailure=True,
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="master-updates",
	slavenames=[ "server" ],
	properties={"priority": 0},
	factory=f_master_update))

force_updates.append("master-updates")

c['schedulers'].append(ForceScheduler(name="Forced Updates",
	reason=FixedParameter(name="reason", default=""),
	properties=[ ],
	builderNames=force_updates))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.HTPasswdAprAuth('/var/www/.htpasswd'),
    gracefulShutdown = 'auth',
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg,
		   provide_feeds=[ ]))

####### MAIL

# from buildbot.status.mail import MailNotifier

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Linux kernel hwmon and stable builds"
c['titleURL'] = "http://kerneltests.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

# c['buildbotURL'] = "http://server.roeck-us.net:8010/"
c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
